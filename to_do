ASSET LINKS [ 2 DAYS ]
	- cant move assets under themselves and cant create a new link under itself.
	- create new table sq_asset_link_value to store values on links
	- change assets that use 'value' field in link to use new table (probably just designs)
	- pass in array of (name => value) pairs instead of $value in getLinks
	- add new tree stucture to asset links

WEB PATHS [ 1 DAY ]
	- store paths on link as space seperated string in new value table
	- URLS still stored in lookup table and are updated based on moving of asset, change of virtual paths etc.
	- preg_split on whitespace to get virtual paths from the value string
	- when creating new sq_nav link, asset virtual path defaults to the value from name() made valid
	- moving an asset tries to keep the same virual paths but checks for conflicts and alters paths accordingly (through incremental names) for the current asset and follows all minor links recursivly
	- check a virtual path does not equal the backend suffix (ie is not _edit)

FLASH ASSET FINDER [ 5 DAYS ]
	- find asset OF TYPE blah WITH NAME foo
	- in 'finder view', press and hold menu has option 'use me' instead of regular ones
	- this will be used by the interfaces for linking images, nesting content and basically anything that needs the user to select an asset where a drop-down list would have once appeared

FLASH ASSET TREE [ 3 DAYS ]
	- check for other users changes to tree and refresh if needed
	- add manual refresh of tree
	- add DUPE option to linking popup menu

CMS PACKAGE [ 1 DAYS ]
	- make current page asset the standard page template and extract the base page class
	- nest content contentType

ASSET ATTRIBUTES [ 1/2 DAY ]
	- create select attribute
	- create date attribute
		- use GMT for all date fields and convert from/to local time
		- asset management class defines short/medium/long formats to be used
		- system defaults for all date formats that get overwritten by asset management

DELETING ASSETS [ 1 1/2 DAYS ]
	- Purging the trash
	- inform user of affected assets when deleting - found using links where you are the minor
	- moving assets to trash in the flash menu can be done but confirmation is required
	- all confirmations should appear in a popup window
	
DESIGN AREAS [ 5 DAYS ]
	- get the menu to restrict the printing certain asset types
	- login design area to be created
	- custom image design area to be created
	- rollover image design area to be created
	- page lineage design area to be created as a menu type
		- probably should be renamed
	- images and stylesheet to become file assets in design
	- date design area to be created
		- set format and type (today, created, modified etc) in design
	- permanent page design area to be created and possibly renamed to 'nest content'
		- should be able to print and frontend printable assets
		- probably should be renamed
	- print friendly pages will becomes part of the core and be replaced by a variable in the design to print the HREF to the printer friendly version of this asset
		- HREF will probably be the current HREF with a suffix defined in the conf (eg _print)
		- probably should be renamed

FILE ASSETS [ 1 1/2 DAYS ]
	- bring across attributes from MySource
	- new structure for file asset

		- FILE
		    |__ IMAGE (FILE with extension of gif, jpg etc)
		           |__ THUMBNAIL (IMAGE with max width and height - 100 x 100?)

		- when using asset finder to search for thumbnails, only find assets of type 'thumbnail'
		- allows for easy morphing back up the tree to 'image' or 'file'

INSTALL/UPGRADE PROCESS [ 1 DAY ]
	- check MD5 of files when overwriting in data directory to warn if modified files are being overwriten. This will eventually be another step in the web install script
	- check that _ser_atrs is set to true if any 'serialise' attributes are found
	- remove attributes in an asset bassed on the version they are listed as being removed in
		- delete this attribute from the attribute ans attribute_value tables
	- update asset attributes using the update function defined for the attribute when upgrading
		- let the current version fall through a switch statement to get as many updates as it requries

OPTIMISATION [ 1/2 DAY ]
	- go through existing code and add forgetAsset calls to free memory
	- wherever getAsset is called, attempt to pass type of asset

CONDITIONAL ASSETS [ 2 DAYS ]
	- conditions are assets but are system only and are stored in resolve/core/assets/condtions
	- base conditions that need to be built
		- logged_in
		- in_user_group
		- permission_check
		- in_backend
	- conditions can be placed on a link in the value table
	- designs need to be altered to use conditions - which will be a core component of designs
	- conditions will have an initOutput function to print PHP functions required by the condition. This will allow assets that cache their output (such as designs and tables) to cache PHP output to generate a boolean value to switch on
	- conditions may be quite simple though and only require a single inline command. eg GLOBALS['SQ_SYSTEM']->isLoggedIn()
	- bodycopy will handle conditions in its own way
	- need a function defined somewhere in the core to get a list of all available condition types

DESIGNS IN BACKEND [ 5 DAYS ]
	- when uploading a parse file for a design you also upload an alternate parse file for the backend. No additional design areas may be defined in this parse file but some can be removed
	- wouldnt need to redefine design area content settings in the backend parse file as it would read this iformation and customisations from the main parse file
	- create new backend design area to define backend sections and fields
	- when system is installed, install a defualt design for the backend that cannot be deleted or customised
	- if their is no backend parse file for a design, revert to the default design
	- will need common stylesheet elements for forms etc in all backend designs

INTERNAL MESSAGING SYSTEM [ 3 DAYS ]
	- one frame that refreshes every X minutes and performs certain actions (check for message, check lock status, check for asset tree changes)
	- DHTML message notification in top right of screen with possible background sound in iFrame
	- clicking link in DHTML popup will do the following:
		- if possible, open the flash frame if it has been closed
		- switch flash tree to the message tab
	- every internal message should be logged
	- messages can be sent to a user, and user group, or all users (based on an assetid supplied)
	- messages can have different states (new, read, archived etc)
	- full message inbox is displayed on the personal to-do page

FLASH MESSAGE TAB [ 2 DAYS ]
	- flash tree has a tab for internal messages for the current user and the current session
	- this view should allow the user to mark the messages as read and archive them

PERMISSIONS [ 6 DAYS ]
	- four types of access: Read, Write, Administrator, Publish
	- publish access incorporates workflow management (user defined)
	- administrators of the asset can do anything they like
	- once an asset is live (example: page), write access will let you safe-edit or dupe the asset.
	- if safe-editing, the workflow process must be followed from the begining before publishing.
	- the publishing workflow will be, at least, a single person (in a user group with publish access on the asset) to approve/publish the asset (make live)
	- If a user with publish access wants to edit a live page, three situations may occur:
		1. If there is no workflow defined in the system, anyone with publish access to an asset can live edit
		2. If there is workflow, but their are no other concerned users for workflow, the publisher can live edit. An example is if the workflow for the asset says that someone in UserGroup1 must approve the work before publishing, and this publisher is in UserGroup1.
		3. If there is workflow defined, and there are other users concerned with this workflow anywhere in the workflow process, the publisher may not live edit. They can only safe-edit the asset, which then goes through the workflow process as normal (which they may be a part of).
	- need some sort of PUBLIC flag for an asset to indicate anyone has read access
	- create a new type of user, backend_user (from which root_user inherits) so that only backend_users can access the backend and thus create assets
	- any backend_user can create any asset type
	- to create a new page under page 'foo' you need to have write access to 'foo'
	- to delete the link from 'foo' to 'bar' (foo is major) you need to have write access to 'foo' but dont need any access to 'bar'
	- create a new registered user group 'System Administrators'. Users in this group can do anything except root specific functions (eg config settings, adding/removing from sysAsmin group)
	- permissions are inherited using the asset tree
	- when multiple trees define different permissions, they are added together eg R + RW = RW
	- if you define your own permissions, they override all others
	- only sysAdmins can create/edit workflow and assign workflow to an asset. The exception is an administrator of an asset who can change workflow
	- people with ADMINSTRATOR permission are like sysAdmins for the asset. This permission is inherited. These users can do anything, including changing permissions/workflow/live edit/publish for the asset
	- admins can delete their assets
	- sysAdmins/Root can create/delete users
	- a user can edit their own details because they are made an admin of their user asset
	- users are admins of their own workspaces, so when you create an asset in your workspace the new asset inherits the permission of the workspace (ie. you become an admin). BUT when you move the asset out of the worlspace, no direct permissions are created and so the asset now inherits permission from the new parent (where the user who created it may not even have read access)

WORKFLOW [ 4 DAYS ]
	- create a workflow object that is NOT an asset
	- alter the publish permission to incorporate workflow instead
	- workflow is stored as a serialised object/array which stores the steps of the workflow
	- allow a simple interface for adding publishers in backend for an asset
		adding a publisher is basically just adding/removing them from a hidden first step of the workflow process where the asset needs to be approved by at least one user
	- workflow will be a tab in the backend for each asset
	- workflow will be inherited/stored just like permissions
	- overriding workflow is done as a whole - not individual steps
	- if multiple tress define workflow for the same asset (ie. the asset inherits more than one workflow), all workflows must be satisfied before publishing
	- if you define your own workflow, it overrides all others
	- rollback entries need to be marked as being in the middle of a workflow process to they cant be purged
	- special groups appear in the workflow steps so users can select aminds/read/write permission groups for the current asset (eg. at least one admin of this page must approve the page)
	- if an admin changes workflow, warn of all current workflows that this will affect and then reset all workflows

WORKSPACES [ 1/2 DAY ]
	- will have system wide URL to access workspaces on frontend
		eg. beta.squiz.net/~gsherwood
	- user has admin access to their workspace
	- cant delete your workspace

TRASH [ 1 1/2 DAYS ]
	- when an asset is trashed, its permission get set to what the asset was inheriting (if it was inheriting)
	- assets in the trash can be restored to where they were deleted from by people who have write access to the old parent
	- asset in the trash can be duped by anyone with read access (most commonly to their own workspace)

LOCKING [ 4 DAYS ]
	- to lock an asset, need to be able to find out what we are going to need to lock before the locking process in started eg. locking a page locks the bodycopy, tables etc.
	- add a new 'locking tab' to list locks
	- forceably aquiring a lock sends an internal message
	- users with greater level of access can foreably aquire a lock but massive logging occurs at this point
	- initially, screens are displayed in a read-only view
	- user needs to click an edit button at the top of the page to lock the page and begin editing
	- if any element of the page is already locked, the edit button is replaced by a message and a link to the 'locking tab'
	- when locking, begin transaction and attempt to lock all assets that any element of the page is linked to
	- new locking table to be created
		sq_asset_lock (
		  assetid
		  source_asset
		  userid
		  expires
		);
	- when forceable aquiring a lock, transaction begins to release all locks with the same asset_sourceid as the elements locked on the page and then aquire new lock on current page
	- to aquire current locks you must have access to aquire all currently active locks
	- the frame that refreshes and updates the expiry date for the lock needs to make sure you are still editing the asset that you have locked. If you change assets, your lock is removed
	- any commit will release the lock on all elements of the page. Two ways to do this:
		- forms can set a hidden var to tell the system to not release the lock (eg creating a table will submit the form with a commit action but will not release the lock if the form var is set)
		- commit button has to explicity set a form var to remove the lock. Any button printed using the commit_button function will then remove the current lock when pressed
	LOCKING TAB
		- all locks displayed for all lockable elements
			- display who locked it
			- display when lock expires
			- display what they are editing (name of source asset)
			- display what elements of your page are being locked
		- 'Force Aquire Lock' button at bottom of page to auire all locks on page

ROLLBACK

SERVER REPLICATION









UNIQUE ATTRIBUTE VALUES
	- eg. username must be unique across the system and servers (server replication)

DOCUMENTATION
	- Fix all comments to work with PHPDocumenter

GENERAL
	- have onUnload events for main frame in case other frames try to change it. Example would be leaving the content editing frame when you have uncomitted changes
	- use JS calendar (http://students.infoiasi.ro/~mishoo/site/calendar.epl) for date attributes
	- add a ghost page for deleted URLs to page not found errors dont occur for them
	- redesign the bodycopy for frontend editing

TRANSACTIONS
	- build a transaction manager to manage database and file system transactions and nested transactions.
		- one 'abort' aborts all current transactions
		- only the last 'commit' actually does anything
		- need to be able to know the current state of a file in file system transactions
		- may need to create temporary file area while doing transaction
		- will need to be able to 'abort' if the 'commit' fails

