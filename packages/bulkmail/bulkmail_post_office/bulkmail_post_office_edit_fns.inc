<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: bulkmail_post_office_edit_fns.inc,v 1.20 2005/11/17 22:46:08 rong Exp $
*
*/

require_once SQ_INCLUDE_PATH.'/asset_edit/asset_edit_fns.inc';


/**
* Bulkmail_Post_Office_Edit_Fns
*
* Purpose
*
*
* @author Nathan de Vries <ndvries@squiz.net>
* @author Rayn Ong <rong@squiz.net>
*
* @version $Revision: 1.20 $
* @package MySource_Matrix_Packages
* @subpackage bulkmail
*/
class Bulkmail_Post_Office_Edit_Fns extends Asset_Edit_Fns
{


	/**
	* Constructor
	*
	*/
	function Bulkmail_Post_Office_Edit_Fns()
	{
		$this->Asset_Edit_Fns();

	}//end constructor


//--        DETAILS        --//


	/**
	* Paints the recipients which will recieve the bulkmail
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintRecipients(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');
		$recipients = $asset->attr('recipients');

		if ($write_access) {
			multiple_asset_finder($prefix.'_groups', $recipients);
		} else {
			?><ul><?php
				foreach ($recipients as $assetid) {
					$group_asset = null;
					if (!empty($assetid)) {
						$group_asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($assetid);
					}

					if (!is_null($group_asset)) {
						?><li><?php echo get_asset_tag_line($group_asset->id); ?></li><?php
					} else {
						echo translate('bulkmail_recipient_group_asset_not_found');
					}
				}
			?></ul><?php
		}

		return $write_access;

	}//end paintRecipients()


	/**
	* Processes the value input from group addressee selection widget
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return void
	* @access public
	*/
	function processRecipients(&$asset, &$o, $prefix)
	{
		// need to have write access to make any changes
		if (!$asset->writeAccess('attributes')) return false;

		$groups = Array();
		if (is_array($_POST[$prefix.'_groups'])) {
			foreach ($_POST[$prefix.'_groups'] as $group_node) {
				if (!empty($group_node['assetid'])) {
					$groups[] = $group_node['assetid'];
				}
			}
		}

		return $asset->setAttrValue('recipients', $groups);

	}//end processRecipients()


	/**
	* Paint the email server details
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return void
	* @access public
	*/
	function paintServerDetails(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');
		$server_details = $asset->attr('server_details');

		$field_name = translate('bulkmail_server_detail_mail_method_field_name');
		$o->openField($field_name);
			$options = Array(
						'smtp'		=> 'SMTP',
						'sendmail'	=> 'Sendmail',
					   );

			$onChange = 'onChange="switchDriver(this.value)"';
			$value = array_get_index($server_details, 'driver', 'smtp');
			if ($write_access) {
				combo_box($prefix.'_server_det_driver', $options, false, $value, 0, $onChange);
			} else {
				echo $options[$value];
			}
		$o->closeField();

		$smtp = !($value == 'smtp');

		$field_name = translate('bulkmail_server_detail_host_field_name');
		$name = $prefix.'_server_detail_smtp_host';
		$o->openField($field_name, '', '', $smtp, $name.'_field');
			$value = array_get_index($server_details, 'host', '');
			if ($write_access) {
				text_box($name, array_get_index($server_details, 'host', ''));
			} else {
				echo $value;
			}
		$o->closeField();

		$field_name = translate('bulkmail_server_detail_port_field_name');
		$name = $prefix.'_server_detail_smtp_port';
		$o->openField($field_name, '', '', $smtp, $name.'_field');
			$value = array_get_index($server_details, 'port', '');
			if ($write_access) {
				int_text_box($name, $value, false, 4);
			} else {
				echo $value;
			}
		$o->closeField();

		$field_name = translate('bulkmail_server_detail_auth_field_name');
		$name = $prefix.'_server_detail_smtp_auth';
		$o->openField($field_name, '', 'Server requires authentication?', $smtp, $name.'_field');
			$auth = array_get_index($server_details, 'auth', false);

			if ($write_access) {
				check_box($name, true, $auth, 'switchAuthentication(this.checked)');
			} else {
				?>
					<img src="<?php echo sq_web_path('lib'); ?>/web/images/<?php echo $auth ? 'tick' : 'cross'; ?>.gif" width="15" height="15" />
				<?php
			}
		$o->closeField();

		$disabled = ($auth) ? '' : 'disabled=true';

		$name = $prefix.'_server_detail_smtp_auth_username';
		$o->openField(translate('username'), '', '', $smtp, $name.'_field');
			$value = array_get_index($server_details, 'username', '');
			if ($write_access) {
				//text_box($name, $value, '', '', false, 'disabled='.$disabled);
				text_box($name, $value, '', '', false, $disabled);
			} else {
				echo $value;
			}
		$o->closeField();

		$name = $prefix.'_server_detail_smtp_auth_password';
		$o->openField(translate('password'), '', '', $smtp, $name.'_field');
			$value = array_get_index($server_details, 'password', '');
			if ($write_access) {
				password_box($name, $value, '', '', $disabled);
			} else {
				echo str_repeat('*', strlen($value));
			}
		$o->closeField();

		$field_name = translate('bulkmail_server_detail_path_field_name');
		$name = $prefix.'_server_detail_sendmail_sendmail_path';
		$o->openField($field_name, '', 'The path to your sendmail binary. Eg. /usr/sbin/sendmail', !$smtp, $name.'_field');
			$value = array_get_index($server_details, 'sendmail_path', '');
			if ($write_access) {
				text_box($name, $value);
			} else {
				echo $value;
			}
		$o->closeField();

		$field_name = translate('bulkmail_server_detail_arg_field_name');
		$name = $prefix.'_server_detail_sendmail_sendmail_args';
		$o->openField($field_name, '', 'Eg. -t will run sendmail as \'sendmail -t\'', !$smtp, $name.'_field');
			$value = array_get_index($server_details, 'sendmail_args', '');
			if ($write_access) {
				text_box($name, $value);
			} else {
				echo $value;
			}
		//$o->closeField(); This field is closed in the edit interface

		?>
			<script type="text/javascript">
				function switchDriver(driver) {
					var prefix = '<?php echo $prefix; ?>';
					var regex_string1 = prefix + '_server_detail.*_field';
					var regex_string2 = prefix + '_server_detail_' + driver + '.*_field';
					var re1 = new RegExp(regex_string1);
					var re2 = new RegExp(regex_string2);
					var elements = document.getElementsByTagName('tr');

					for (i = 0; i < elements.length; i++) {
						if (elements[i].id.match(re1)) {
							if (elements[i].id.match(re2)) {
								elements[i].style['display'] = '';
							} else {
								elements[i].style['display'] = 'none';
							}
						}
					}
				}

				function switchAuthentication(checked) {
					var prefix = '<?php echo $prefix; ?>';
					var regex_string1 = prefix + '_server_detail_smtp_auth_.*';
					var re1 = new RegExp(regex_string1);
					var elements = document.main_form.elements;

					for (i = 0; i < elements.length; i++) {
						if (elements[i].name.match(re1)) {
							elements[i].disabled = !checked;
						}
					}
				}
			</script>
		<?php

		return $write_access;

	}//end paintServerDetails()


	/**
	* Process the email server details
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return void
	* @access public
	*/
	function processServerDetails(&$asset, &$o, $prefix)
	{
		// need to have write access to make any changes
		if (!$asset->writeAccess('attributes')) return false;

		$driver = array_get_index($_REQUEST, $prefix.'_server_det_driver', 'smtp');
		foreach ($_REQUEST as $key => $value) {
			if (preg_match('/'.$prefix.'_server_detail_'.$driver.'_(auth_)?([^^]*)/', $key, $matches)) {
				// do not store empty string so that we can use PEAR mail default params
				if ($value) $server_details[$matches[2]] = $value;
			}
		}
		$server_details['driver'] = $driver;

		if (array_get_index($server_details, 'driver', 'smtp') == 'smtp') {
			if (array_get_index($server_details, 'auth', false) == false) {
				$server_details['auth'] = false;
				$server_details['username'] = '';
				$server_details['password'] = '';
			}
		}
		return $asset->setAttrValue('server_details', $server_details);

	}//end processServerDetails()


	/**
	* Paints the header details interface for the bmail
	*
	* This paint function is used by bulkmail job too
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintHeaderDetails(&$asset, &$o, $prefix)
	{
		$width = 30;
		$write_access = $asset->writeAccess('attributes');

		// paint extra header fields
		$header_details = $asset->attr('header_details');
		//$o->openField(translate('bulkmail_header_detail_extra_fields'));
			?>
			<table class="sq-backend-table">
				<tr>
					<th class="sq-backend-table-header"><b><?php echo translate('bulkmail_header_detail_field_name'); ?></b></th>
					<th class="sq-backend-table-header"><b><?php echo translate('bulkmail_header_detail_field_body'); ?></b></th>
					<?php
					if ($write_access) {
						?><th class="sq-backend-table-header"><b><?php echo translate('delete_question'); ?></b></th><?php
					}
					?>
				</tr>
				<?php
					$index = 0;
					foreach ($header_details as $field_name => $field_body) {
						if ($write_access) {
							?><tr>
								<td class="sq-backend-table-cell"><?php echo text_box($prefix.'_header_detail_fields_name_'.$index, $field_name);?></td>
								<td class="sq-backend-table-cell"><?php echo text_box($prefix.'_header_detail_fields_body_'.$index, $field_body);?></td>
								<td class="sq-backend-table-cell"><?php check_box($prefix.'_header_detail_fields_delete_'.$index, true, false);?></td>
							</tr><?php
						} else {
							?><tr>
								<td class="sq-backend-table-cell"><?php echo $field_name;?></td>
								<td class="sq-backend-table-cell" colspan="2"><?php echo htmlspecialchars($field_body);?></td>
							</tr><?php
						}
						$index++;
					}
				?>
			</table>
			<?php
		$o->closeField();

		// text box for new field entry
		if ($write_access) {
			$o->openField(translate('bulkmail_header_new_field_name'));
				text_box($prefix.'_header_detail_field_new_name', '', $width);
			$o->closeField();
			$o->openField(translate('bulkmail_header_new_field_body'));
				text_box($prefix.'_header_detail_field_new_body', '', $width);
			//$o->closeField();
		}

		return $write_access;

	}//end paintHeaderDetails()


	/**
	* Process the header details for the bmail
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function processHeaderDetails(&$asset, &$o, $prefix)
	{
		// need to have write access to make any changes
		if (!$asset->writeAccess('attributes')) return false;

		// update and delete fields
		$header_details = Array();
		$index = 0;
		// changed naming convention from name[i] to name_i to comply with xhtml standards
		while (isset($_POST[$prefix.'_header_detail_fields_name_'.$index])) {
			if (!isset($_POST[$prefix.'_header_detail_fields_delete_'.$index])) {
				$name = $_POST[$prefix.'_header_detail_fields_name_'.$index];
				$body = $_POST[$prefix.'_header_detail_fields_body_'.$index];
				$header_details[$name] = $body;
			}
			$index++;
		}

		// create a new field or overwrite an existing field
		$field_status = (isset($_POST[$prefix.'_header_detail_field_new_name']) && trim($_POST[$prefix.'_header_detail_field_new_name']) != '');
		$body_status  = (isset($_POST[$prefix.'_header_detail_field_new_body']) && trim($_POST[$prefix.'_header_detail_field_new_body']) != '');
		if ($field_status && $body_status) {
			$new_field_name = trim($_POST[$prefix.'_header_detail_field_new_name']);
			$new_field_body = trim($_POST[$prefix.'_header_detail_field_new_body']);
			$header_details[$new_field_name] = $new_field_body;
		}

		$asset->setAttrValue('header_details', $header_details);
		return true;

	}//end processHeaderDetails()


//--        THRESHOLD        --//


	/**
	* Paint the threshold settings
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintThresholds(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');
		$threshold = $asset->attr('threshold');

		// paint existing rules
		$o->openField(translate('bulkmail_threshold_current_rules'));
		?>
		<table class="sq-backend-table">
			<tr>
				<th class="sq-backend-table-header"><?php echo translate('type') ?></th>
				<th class="sq-backend-table-header"><?php echo translate('bulkmail_threshold_allow_multiple') ?></th>
				<th class="sq-backend-table-header"><?php echo translate('rule') ?></th>
				<?php
					if ($write_access) {
						?><th class="sq-backend-table-header"><?php echo translate('delete_rule') ?></th><?php
					}
				?>
			</tr><?php
			if (!empty($threshold)) {
				foreach ($threshold as $key => $rule) {
					?><tr>
						<td class="sq-backend-table-cell"><?php echo $rule['type']; ?></td>
						<td class="sq-backend-table-cell"><?php echo ($rule['multiple']) ? translate('true') : translate('false'); ?></td>
					<?php
						switch ($rule['type']) {
							case translate('bulkmail_threshold_rule_excluded_time') :
								$this->_paintExcludedTimeRule($asset, $o, $prefix.'_threshold_rule_'.$key, $rule);
							break;
							case translate('bulkmail_threshold_rule_send_rate') :
								$this->_paintSendRateRule($asset, $o, $prefix.'_threshold_rule_'.$key, $rule);
							break;
							default:
							break;
						}
					?></tr><?php
				}
			}
		?>
		</table><?php
		$o->closeField();

		// the dropdown box that allows user to add new rules
		if ($write_access) {
			$o->openField(translate('bulkmail_threshold_add_rule'), '', translate('bulkmail_threshold_add_rule_note'));
				$this->paintAddRule($asset, $o, $prefix);
			$o->closeField();
		}
		return true;

	}//end paintThresholds()


	/**
	* Process the threshold settings
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function processThresholds(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		$threshold = $asset->attr('threshold');
		if (!empty($threshold)) {
			foreach ($threshold as $key => $rule) {
				switch ($rule['type']) {
					case translate('bulkmail_threshold_rule_excluded_time') :
						$threshold = $this->_processExcludedTimeRule($prefix.'_threshold_rule_'.$key, $threshold, $key);
					break;
					case translate('bulkmail_threshold_rule_send_rate') :
						$threshold = $this->_processSendRateRule($prefix.'_threshold_rule_'.$key, $threshold, $key);
					break;
					default:
					break;
				}
			}
		}
		$threshold = $this->processAddRule($asset, $o, $prefix, $threshold);
		$asset->setAttrValue('threshold', $threshold);

		return true;

	}//end processThresholds()


	/**
	* Paints the dropdown to add a rule to this section
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAddRule(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		$rules = Array('' => '-- '.translate('bulkmail_threshold_choose_type').' --');
		$rules += Array(
					translate('bulkmail_threshold_rule_excluded_time'),
					translate('bulkmail_threshold_rule_send_rate'),
				  );
		combo_box($prefix.'_rule_type', $rules, false, '');

		return true;

	}//end paintAddRule()


	/**
	* Processes the dropdown to add a rule to this section
	*
	* @param object	&$asset		the asset whose interface we are painting
	* @param object	&$o			the outputter class
	* @param string	$prefix		prefix for the form elements
	* @param array	$threshold	the post office's threshold attribute
	*
	* @return array
	* @access public
	*/
	function processAddRule(&$asset, &$o, $prefix, $threshold)
	{
		if ($asset->writeAccess('attributes')) {
			$rules = Array(
						translate('bulkmail_threshold_rule_excluded_time'),
						translate('bulkmail_threshold_rule_send_rate'),
					 );
			if (isset($_POST[$prefix.'_rule_type'])) {
				$type = (isset($rules[$_POST[$prefix.'_rule_type']])) ? $rules[$_POST[$prefix.'_rule_type']] : '';
			}
			// multiple entries not allowed for this rule type
			foreach ($threshold as $key => $val) {
				if ($val['type'] == $type) {
					if (!$val['multiple']) return $threshold;
				}
			}
			$threshold_types = $asset->attr('threshold_types');
			switch ($type) {
					case translate('bulkmail_threshold_rule_excluded_time') :
						$threshold_types[0]['type'] = $type;
						$threshold[] = $threshold_types[0];
					break;
					case translate('bulkmail_threshold_rule_send_rate') :
						$threshold_types[1]['type'] = $type;
						$threshold[] = $threshold_types[1];
					break;
					default:
					break;
			}
		}

		return $threshold;

	}//end processAddRule()


	/**
	* Paints the 'excluded time' rule
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	* @param array	$rule	the rule that we are painting
	*
	* @return void
	* @access private
	*/
	function _paintExcludedTimeRule(&$asset, &$o, $prefix, $rule)
	{
		$write_access = $asset->writeAccess('attributes');
		$hours_array = Array(
						0	=> '00',
						1	=> '01',
						2	=> '02',
						3	=> '03',
						4	=> '04',
						5	=> '05',
						6	=> '06',
						7	=> '07',
						8	=> '08',
						9	=> '09',
						10	=> '10',
						11	=> '11',
						12	=> '12',
						13	=> '13',
						14	=> '14',
						15	=> '15',
						16	=> '16',
						17	=> '17',
						18	=> '18',
						19	=> '19',
						20	=> '20',
						21	=> '21',
						22	=> '22',
						23	=> '23',
					   );
		$days_array = Array(
						0	=> translate('sunday'),
						1	=> translate('monday'),
						2	=> translate('tuesday'),
						3	=> translate('wednesday'),
						4	=> translate('thursday'),
						5	=> translate('friday'),
						6	=> translate('saturday'),
					  );

		if ($write_access) {
			ob_start();
				combo_box($prefix.'_from', $hours_array, false, $rule['params']['from']);
				$from = ob_get_contents();
			ob_end_clean();
			ob_start();
				combo_box($prefix.'_to', $hours_array, false, $rule['params']['to']);
				$to = ob_get_contents();
			ob_end_clean();
			ob_start();
				combo_box($prefix.'_days', $days_array, true, $rule['params']['days']);
				$days = ob_get_contents();
			ob_end_clean();
			?><td class="sq-backend-table-cell"><?php
				echo translate('bulkmail_threshold_rule_excluded_time_hour', $from, $to);
				echo translate('bulkmail_threshold_rule_excluded_time_days', $days);
			?></td><td class="sq-backend-table-cell"><?php
				check_box($prefix.'_delete', true, false);?></td><?php
		} else {
			$from = $hours_array[$rule['params']['from']];
			$to = $hours_array[$rule['params']['to']];
			if (!empty($rule['params']['days'])) {
				$selected_days = Array();
				foreach ($rule['params']['days'] as $day) {
					$selected_days[] = $days_array[$day];
				}
				$days = implode(', ', $selected_days);
			}
			?><td class="sq-backend-table-cell" colspan="2"><?php
				echo translate('bulkmail_threshold_rule_excluded_time_hour', $from, $to);
				if (!empty($days)) {
					echo translate('bulkmail_threshold_rule_excluded_time_days', $days);
				}
			?></td><?php
		}

	}//end _paintExcludedTimeRule()


	/**
	* Processes the 'excluded time' rule
	*
	* @param string	$prefix		prefix for the form elements
	* @param array	$threshold	the post office's threshold attribute
	* @param int	$key		the index of this rule in the threshold array
	*
	* @return array
	* @access private
	*/
	function _processExcludedTimeRule($prefix, $threshold, $key)
	{
		// make changes to threshold attribute accordingly and pass it back to the process function
		if (isset($_POST[$prefix.'_from'])) {
			$params['from'] = $_POST[$prefix.'_from'];
			// check for valid range
			if ($_POST[$prefix.'_to'] < $_POST[$prefix.'_from']) {
				// 'to' time must be greater than 'from' time
				$params['to'] = $_POST[$prefix.'_from'];
			} else {
				$params['to'] = $_POST[$prefix.'_to'];
			}
			$params['days'] = (isset($_POST[$prefix.'_days'])) ? $_POST[$prefix.'_days'] : Array();
		}
		$threshold[$key]['params'] = $params;
		// delete box is checked
		if (isset($_POST[$prefix.'_delete'])) {
			unset($threshold[$key]);
		}

		return $threshold;

	}//end _processExcludedTimeRule()


	/**
	* Paints the 'Send Rate' rule
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	* @param array	$rule	the rule that we are painting
	*
	* @return void
	* @access private
	*/
	function _paintSendRateRule(&$asset, &$o, $prefix, $rule)
	{
		$time_unit = Array(
						60		=> translate('minute'),
						3600	=> translate('hour'),
						86400	=> translate('day'),
					 );

		$write_access = $asset->writeAccess('attributes');
		if ($write_access) {
			ob_start();
				int_text_box($prefix.'_value', $rule['params']['value'], false);
				$value = ob_get_contents();
			ob_end_clean();
			ob_start();
				combo_box($prefix.'_unit', $time_unit, false, $rule['params']['unit']);
				$unit = ob_get_contents();
			ob_end_clean();
			?><td class="sq-backend-table-cell"><?php
				echo translate('bulkmail_threshold_rule_send_rate_detail', $value, $unit);
			?></td><td class="sq-backend-table-cell"><?php
				check_box($prefix.'_delete', true, false);?></td><?php
		} else {
			$value = $rule['params']['value'];
			$unit = $time_unit[$rule['params']['unit']];
			?><td class="sq-backend-table-cell" colspan="2"><?php
				echo translate('bulkmail_threshold_rule_send_rate_detail', $value, $unit);
			?></td><?php
		}

	}//end _paintSendRateRule()


	/**
	* Processes the 'Send Rate' rule
	*
	* @param string	$prefix		prefix for the form elements
	* @param array	$threshold	the post office's threshold attribute
	* @param int	$key		the index of this rule in the threshold array
	*
	* @return array
	* @access private
	*/
	function _processSendRateRule($prefix, $threshold, $key)
	{
		if (isset($_POST[$prefix.'_value'])) {
			$params['value'] = $_POST[$prefix.'_value'];
			$params['unit'] = $_POST[$prefix.'_unit'];
			// do not allow zero rate
			if (!$params['value']) $params['value'] = 1;
		}
		$threshold[$key]['params'] = $params;
		if (isset($_POST[$prefix.'_delete'])) {
			unset($threshold[$key]);
		}

		return $threshold;

	}//end _processSendRateRule()


//--        JOB MANAGEMENT        --//


	/**
	* Paint the job queue
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintJobQueue(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');
		$bulkmail_manager =& $GLOBALS['SQ_SYSTEM']->am->getSystemAsset('bulkmail_manager');
		$bulkmail_manager_edit_fns = $bulkmail_manager->getEditFns();
		$o->openField('');
			$jobs = $bulkmail_manager->getQueuedJobs(null, $asset->id);
			$bulkmail_manager_edit_fns->_paintJobQueue($asset, $jobs);
		$o->closeField();

		return $write_access;

	}//end paintJobQueue()


	/**
	* Process the job queue
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function processJobQueue(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');
		$bulkmail_manager =& $GLOBALS['SQ_SYSTEM']->am->getSystemAsset('bulkmail_manager');
		$bulkmail_manager_edit_fns = $bulkmail_manager->getEditFns();
		if (!$write_access) return;

		$jobs = $bulkmail_manager->getQueuedJobs(null, $asset->id);
		$bulkmail_manager_edit_fns->_processJobQueue($asset, $jobs);

		return true;

	}//end processJobQueue()


	/**
	* Function that determine whether to hide or show the progress section for this post office
	*
	* @param object	&$asset	the asset to which we belong
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function showProgressSection(&$asset, $prefix)
	{
		$bulkmail_manager =& $GLOBALS['SQ_SYSTEM']->am->getSystemAsset('bulkmail_manager');
		$jobs = $bulkmail_manager->getQueuedJobs(null, $asset->id);

		return (empty($jobs) ? false : true);

	}//end showProgressSection()


}//end class
?>
