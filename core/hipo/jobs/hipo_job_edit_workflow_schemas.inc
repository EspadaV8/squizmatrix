<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: hipo_job_edit_workflow_schemas.inc,v 1.24 2005/03/23 22:57:15 ndvries Exp $
*
*/

require_once SQ_SYSTEM_ROOT.'/core/hipo/hipo_job.inc';

/**
* Highly Intensive Processing Object (HIPO) to edit workflow schemas
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Revision: 1.24 $
* @package MySource_Matrix
* @subpackage HIPO
*/
class HIPO_Job_Edit_Workflow_Schemas extends HIPO_Job
{

	/**
	* The name of this HIPO job (should not be modified by code)
	* @var string
	*/
	var $hipo_name = 'Edit Workflow Schemas';

	/**
	* Array of steps to perform in this HIPO
	* @var Array
	*/
	var $_steps = Array(
						Array(
							  'name'         => 'Acquiring Workflow Locks',
							  'hipo_job'     => Array(
												 	 'init_details_function' => 'getLockAssetDetails',
													  ),
							  'running_mode' => 'server',
							  'auto_step'    => true,
							  'allow_cancel' => true,
							  'percent_done' => 0,
							  'complete'     => false,
							  'message'      => '',
							  ),
						Array(
							  'name'          => 'Updating Workflow Schemas',
							  'function_call' => Array(
													   'process_function' => 'processSchemas',
													   ),
							  'running_mode'  => 'server',
							  'auto_step'     => true,
							  'allow_cancel'  => true,
							  'percent_done'  => 0,
							  'complete'      => false,
							  'message'       => '',
							  ),
						Array(
							  'name'          => 'Releasing Workflow Locks',
							  'function_call' => Array(
													   'process_function' => 'releaseLocks',
													   ),
							  'running_mode'  => 'server',
							  'auto_step'     => true,
							  'allow_cancel'  => false,
							  'percent_done'  => 0,
							  'complete'      => false,
							  'message'       => '',
							  ),
						);


	/**
	* Constructor
	*
	* @param string	$code_name	a unique codename the HIPO
	*/
	function HIPO_Job_Edit_Workflow_Schemas($code_name='')
	{
		$this->HIPO_Job($code_name);

	}//end constructor


	/**
	* Paints backend of this job
	*
	* @param object Backend_Outputter	&$o			reference to the backend outputter
	* @param string						$class		calling class name
	*
	* @return void
	* @access private
	*/
	function paintConfig(&$o, $class)
	{
		$write_access = $this->writeAccess();

		// metadata regeneration threshhold HIPO config entry
		$o->openField('Workflow Schemas Threshold');

		if ($write_access) {
			text_box($class.'[SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD]', SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD, 5);
			echo ' assets';
			$o->note('Value will be divided by number of affected schemas');
		} else {
			echo SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD;
			echo ' assets';
		}

		$o->closeField();

	}//end paintConfig()


	/**
	* Sets some info about thresholds that this hipo requires.
	*
	* @return Array
	* @access public
	*/
	function getConfigVars()
	{
		return Array(
					 'SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD' => Array('editable' => 1, 'default' => 1),
					 );

	}//end getConfigVars()


	/**
	* Returns a unique codename the HIPO can use to ensure it is not being run twice
	*
	* The Edit Workflow Schema HIPO appends the ID of the asset that the schemas are being set at
	* (the top most parent) so that any other schema jobs on this asset do not start while it
	* is running. Due to locking of the interface, nobody should be allowed to run this HIPO at
	* the same time on the same parent asset.
	*
	* @return string
	* @access public
	*/
	function getCodeName()
	{
		return parent::getCodeName().'-'.md5(implode('-',array_keys($this->_running_vars['assets'])));

	}//end getCodeName()


	/**
	* Returns the current Threshold.
	*
	* Returns a value that represents the total percentage that this hipo would run
	* in freestyle mode in its current state.
	*
	* @return float
	* @access public
	*/
	function getThresholdPercentageRequired()
	{
		if (SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD == 0) return 0;
		if (!isset($this->_running_vars['todo_assetids'])) return 0;
		return ((count($this->_running_vars['todo_assetids']) / (SQ_HIPO_WORKFLOW_SCHEMAS_THRESHOLD / count($this->_running_vars['schema_changes']))) * 100);

	}//end getThresholdPercentageRequired()


	/**
	* Performs the duties of this hipo, without showing any output on the frontend.
	*
	* @return boolean
	* @access public
	*/
	function freestyle()
	{
		while (!empty($this->_running_vars['todo_assetids'])) {
			if (!$this->processSchemas($this->_steps[0], get_class($this))) return false;
		}
		return true;

	}//end freestyle()


	/**
	* Prepares the running vars and gets the children of the asset in question
	*
	* @return boolean
	* @access public
	*/
	function prepare()
	{
		// to start editing schemas, we need to have an asset id to start editing schemas at
		if (empty($this->_running_vars['assets'])) {
			trigger_error('Cannot initialise Edit Workflow Schemas HIPO, no asset IDs specified', E_USER_WARNING);
			return false;
		}

		$this->_running_vars['done_assetids'] = Array();
		if (empty($this->_running_vars['schema_changes'])) {
			// no schema changes, so do nothing
			$this->_running_vars['todo_assetids'] = Array();
		} else {
			$assets = $this->_running_vars['assets'];
			$child_assets = Array();
			for (reset($assets); null !== ($assetid = key($assets)); next($assets)) {
				$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($assetid);
				if (is_null($asset)) {
					trigger_error('Cannot initialise Edit Workflow Schemas HIPO, invalid asset ID specified ('.$assetid.')', E_USER_WARNING);
					return '';
				}
				$child_assets += $GLOBALS['SQ_SYSTEM']->am->getChildren($assetid);
				$child_assets[$assetid] = $asset->type();
				unset($asset);
			}
			$this->_running_vars['todo_assetids'] = $child_assets;
		}

		return parent::prepare();

	}//end prepare()


	/**
	* Edit schemas for a single asset in the to-do list
	*
	* @param array		&$step_data	a reference to the array of information about the current step
	* @param string		$prefix		prefix for form vars
	*
	* @return boolean
	* @access public
	*/
	function processSchemas(&$step_data, $prefix)
	{
		if (!empty($this->_running_vars['todo_assetids'])) {
			$assetid = array_shift(array_keys($this->_running_vars['todo_assetids']));
			$asset_type = $this->_running_vars['todo_assetids'][$assetid];
			unset($this->_running_vars['todo_assetids'][$assetid]);
			$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($assetid, $asset_type);

			if (!is_null($asset)) {
				foreach ($this->_running_vars['schema_changes'] as $set_data) {
					if ($set_data['schemaid']) {
						$schema = &$GLOBALS['SQ_SYSTEM']->am->getAsset($set_data['schemaid']);
						if (is_null($schema)) $schema_name = 'Unknown Schema';
						else $schema_name = $schema->name;
					} else {
						continue;
					}

					$wfm = &$GLOBALS['SQ_SYSTEM']->getWorkflowManager();

					if ($set_data['previous_access'] === null) {
						// to edit this schema, there must not currently be a schema set
						// at all - either grant OR deny - for this asset
						$schemas = $wfm->getSchemas($asset->id, $set_data['granted']);
						if (isset($schemas[$set_data['schemaid']])) {
							$new_access     = ($set_data['granted']) ? 'apply' : 'deny';
							$current_access = ($schemas[$set_data['schemaid']]) ? 'applied' : 'denied';
							$this->_addError('Could not '.$new_access.' schema "'.$schema_name.'" on "'.$asset->name.'" because this asset already has this schema '.$current_access.'. The current schema setting for "'.$asset->name.'" has been retained.', true);
							continue;
						}
					} else {
						// we need to have a schema set and the access level be the same
						$schemas = $wfm->getSchemas($asset->id);
						if (!isset($schemas[$set_data['schemaid']])) {
							continue;
						} else if ($schemas[$set_data['schemaid']] != $set_data['previous_access']) {
							$new_access     = ($set_data['previous_access']) ? 'revoke'  : 'apply';
							$current_access = ($set_data['previous_access']) ? 'applied' : 'denied';
							$this->_addError('Could not '.$new_access.' schema "'.$schema_name.'" on "'.$asset->name.'" because this asset already has this schema '.$current_access.'. The current schema setting for "'.$asset->name.'" has been retained.', true);
							continue;
						}
					}

					switch ($set_data['granted']) {
						case -1 :
							// delete a schema
							$wfm->deleteSchema($asset->id, $set_data['schemaid']);
						break;

						case 0  :
						case 1  :
							// deny a schema
							// apply a permission
							$wfm->setSchema($asset->id, $set_data['schemaid'], $set_data['granted']);
						break;
					}
				}

				$step_data['message'] = 'Editing Workflow Schemas for "'.$asset->name.'"';
				$GLOBALS['SQ_SYSTEM']->am->forgetAsset($asset);
				unset($asset);
			} else {
				$step_data['message'] = 'Skipping asset '.$assetid;
				$this->_addError('Could not edit schemas for asset #'.$assetid.', asset does not exist');
			}

			// add this assetid to the done array so we dont do it again
			$this->_running_vars['done_assetids'][] = $assetid;
		}

		if (empty($this->_running_vars['todo_assetids'])) {
			$step_data['percent_done'] = 100;
			$step_data['complete']     = true;
			unset($this->_running_vars['done_assetids']);
		} else {
			$total = count($this->_running_vars['todo_assetids']) + count($this->_running_vars['done_assetids']);
			$step_data['percent_done'] =(count($this->_running_vars['done_assetids']) / $total) * 100;
			$step_data['complete']     = false;
		}

		return true;

	}//end processSchemas()


	/**
	* This function is used to set-up the details for the locking the assets by the nested HIPO_Job
	*
	* @param string		&$job_type
	* @param Array()	&$running_vars
	* @param Array()	&$options
	*
	* @return void
	* @access public
	*/
	function getLockAssetDetails(&$job_type, &$running_vars, &$options)
	{
		$job_type = 'hipo_job_acquire_locks';

		$options['auto_complete'] = true;

		$running_vars = Array(
							  'assetids'          => array_keys($this->_running_vars['assets']),
							  'lock_type'         => Array('workflow'),
							  'forceably_acquire' => false,
							  'dependants_only'   => false,
							  );

	}//end getLockAssetDetails()


	/**
	* Release the locks we acquired while setting the schemas
	*
	* @param array()	&$step_data	a reference to the array of information about the current step
	* @param string		$prefix		prefix for form vars
	*
	* @return boolean
	* @access public
	*/
	function releaseLocks(&$step_data, $prefix)
	{
		if (!isset($this->_running_vars['re_lock_assets'])) {
			$this->_running_vars['re_lock_assets'] = $this->_running_vars['assets'];
		}

		$assetid = key($this->_running_vars['re_lock_assets']);
		unset($this->_running_vars['re_lock_assets'][$assetid]);

		$children = &$GLOBALS['SQ_SYSTEM']->am->getDependantChildren($assetid);

		foreach ($children as $dep_child_id => $dep_child_type_code) {
			$GLOBALS['SQ_SYSTEM']->am->releaseLock($dep_child_id, 'workflow');
		}

		$asset_info = &$GLOBALS['SQ_SYSTEM']->am->getAssetInfo(Array($assetid));

		$step_data['message'] = 'Releasing Lock on '.$asset_info[$assetid]['name'].' and its dependant assets';

		$GLOBALS['SQ_SYSTEM']->am->releaseLock($assetid, 'all');

		$this->_running_vars['done_assetids'][] = $assetid;

		if (empty($this->_running_vars['re_lock_assets'])) {
			unset($this->_running_vars['done_assetids']);
			$step_data['percent_done'] = 100;
			$step_data['complete']     = true;
		} else {
			$step_data['percent_done'] = (count($this->_running_vars['done_assetids']) / count($this->_running_vars['assets'])) * 100;
			$step_data['complete']     = false;
		}

		return true;

	}//end releaseLocks()


}//end class

?>
