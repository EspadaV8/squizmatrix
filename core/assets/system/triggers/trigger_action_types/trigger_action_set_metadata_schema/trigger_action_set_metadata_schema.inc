<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: trigger_action_set_metadata_schema.inc,v 1.1 2005/08/18 05:38:39 ndvries Exp $
*
*/

require_once SQ_CORE_PACKAGE_PATH.'/system/triggers/trigger_action/trigger_action.inc';

/**
* Trigger_Action_Set_Metadata_Schema
*
* A trigger action that applies or denies a metadata schema
*
* @author  Nathan de Vries <ndvries@squiz.net>
* @version $Revision: 1.1 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Trigger_Action_Set_Metadata_Schema extends Trigger_Action
{


	/**
	* Execute this action
	*
	* Returns an array of data about what it did, or false on error
	*
	* The settings used by this action are in the form:<BR />
	* <PRE>
	* Array(
	*       'attribute' => string // the attribute to modify
	*       'value'     => string // the value to set
	*       );
	* </PRE>
	*
	* @param array	$settings	the stored settings for this action
	* @param array	&$state		the state that describes the asset the action is executing on
	*
	* @return array | boolean
	* @access public
	*/
	function execute($settings, &$state)
	{
		$am =& $GLOBALS['SQ_SYSTEM']->am;
		$mm =& $GLOBALS['SQ_SYSTEM']->getMetadataManager();

		// check required settings
		if (empty($settings['schemaid'])) return false;

		if (empty($state['asset'])) {
			// grab the asset if assetid is given, but not the asset.
			if (empty($state['assetid'])) {
				return false;
			} else {
				$state['asset'] =& $am->getAsset($state['assetid']);
			}
		}

		if (is_null($state['asset'])) return false;

		$schema =& $am->getAsset($settings['schemaid']);
		if (is_null($schema)) return false;
		if ($schema->type() != 'metadata_schema') return false;

		$success = $mm->setSchema($state['asset']->id, $schema->id, $settings['granted']);

		if ($success) {
			return Array(
					'assetid'		=> $state['asset']->id,
					'schemaid'		=> $schema->id,
				   );
		} else {
			return false;
		}

	}//end execute()


	/**
	* Get the HTML editing interface for this action. Returns the string instead of printing it
	*
	* @param array		$settings		settings that this condition saves in processInterface()
	* @param string		$prefix			unique prefix
	* @param boolean	$write_access	determines whether the interface is editable
	*
	* @access public
	* @return boolean
	*/
	function getInterface($settings, $prefix, $write_access=false)
	{
		$current_schemaid = (empty($settings['schemaid'])) ? 0 : $settings['schemaid'];

		ob_start();
			if ($write_access) {
				$options = Array(
							true	=> 'Apply',
							false	=> 'Deny'
						   );
				combo_box($prefix.'[granted]', $options, false, $settings['granted']);
				echo ' the following schema ';
				asset_finder($prefix.'[schemaid]', $current_schemaid, Array('metadata_schema' => 'I'));
			} else {
				$granted_str = ($settings['granted']) ? 'Apply' : 'Deny';
				if (!empty($current_schemaid)) {
					$schema_info = $GLOBALS['SQ_SYSTEM']->am->getAssetInfo(Array($current_schemaid));
					echo $granted_str.' the following schema <b>'.$schema_info[$current_schemaid]['name'].' (#'.$current_schemaid.')</b>';
				} else {
					echo $granted_str.' the following schema <b>No schema specified</b>';
				}
			}

			$output = ob_get_contents();
		ob_end_clean();

		return $output;

	}//end getInterface()


	/**
	* Function that handles the conversion of interface to settings
	* together with settings it is expected to populate the hash object
	*
	* @param array	$settings		a container for any data the action might want to save
	* @param string	$request_data	array of data corresponding to this action as
	* 								specified by the $prefix in getInterface.
	*
	* @access public
	* @return boolean
	*/
	function processInterface(&$settings, $request_data)
	{
		$schema_info = array_get_index($request_data, 'schemaid', Array('assetid' => 0));
		$settings['schemaid'] = array_get_index($schema_info, 'assetid', 0);
		$settings['granted'] = array_get_index($request_data, 'granted', true);
		return false;

	}//end processInterface()


	/**
	* Get the list of locks that the action needs acquire before executing
	*
	* @access public
	* @return array
	*/
	function getLocks($settings, &$state)
	{
		return Array($state['assetid'] => Array('metadata'));

	}//end getLocks()


}//end class

?>
