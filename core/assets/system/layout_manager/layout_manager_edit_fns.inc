<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |

* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: layout_manager_edit_fns.inc,v 1.8 2005/11/03 23:57:27 lwright Exp $
*
*/

require_once SQ_INCLUDE_PATH.'/asset_edit/asset_edit_fns.inc';
require_once SQ_INCLUDE_PATH.'/asset_edit_interface.inc';

/**
* Layout_Manager_Edit_Fns
*
* Edit functions for the layout manager.
*
* @see Asset_Edit_Fns
*
* @author  Marc McIntyre <mmcintyre@squiz.net>
* @version $Revision: 1.8 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Layout_Manager_Edit_Fns extends Asset_Edit_Fns
{

	/**
	* Constructor
	*
	* @see Asset_Edit_Fns::Asset_Edit_Fns
	*/
	function Layout_Manager_Edit_Fns()
	{
		$this->static_screens['details']['force_unlock'] = false;
		$this->Asset_Edit_Fns();

	}//end constructor


	/**
	* Paints the interface to add new type_codes to define layouts for
	*
	* @param &object Asset				$asset		the asset of the layout manager
	* @param &object Backend_Outputter	$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function paintAddLayout(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		$types = $GLOBALS['SQ_SYSTEM']->am->getTypeList();
		asset_type_chooser($prefix.'_layouts', true, Array());

		return true;

	}//end paintAddLayout()


	/**
	* Accepts requests to add a type_code to define layouts for
	*
	* @param &object Asset				$asset		the asset of the layout manager
	* @param &object Backend_Outputter	$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function processAddLayout(&$asset, &$o, $prefix)
	{
		if (isset($_POST[$prefix.'_layouts']) && !empty($_POST[$prefix.'_layouts'])) {
			$layouts = $asset->attr('layouts');
			foreach ($_POST[$prefix.'_layouts'] as $type_code) {
				// this should never happen
				if (in_array($type_code, $asset->attr('layouts'))) return false;
				if (!empty($type_code)) $layouts[$type_code] = Array();
			}
			$asset->setAttrValue('layouts', $layouts);
			$asset->saveAttributes();
		}
		return true;

	}//end processAddLayout()


	/**
	* Paints the interface to add new screens to type_codes and layouts to screens
	*
	* @param &object Asset				$asset		the asset of the layout manager
	* @param &object Backend_Outputter	$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function paintEditLayouts(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');

		$layouts = $asset->attr('layouts');
		if (empty($layouts)) {
			$o->note(translate('no_layouts_defined'));
			return false;
		}

		// print the current type_codes that we have defined in the manager
		foreach ($layouts as $type_code => $screens) {

			$uc_type_code = ucwords(str_replace('_', ' ', $type_code));
			$o->openSection($uc_type_code);

				if ($write_access) {
					$o->openField('');

					check_box($prefix.'_remove_type_code['.$type_code.']');
					label(translate('remove_customisations_for', $uc_type_code), $prefix.'_remove_type_code['.$type_code.']');

					$o->closeField();
				}

				$o->openField('');

				if (empty($screens)) {
					$o->note(translate('no_layouts_for_screens', $uc_type_code));
				} else {
					?>
					<table class="sq-backend-table">
						<tr>
							<td class="sq-backend-table-header" width="33%"><?php echo translate('screen_name'); ?></td>
							<td class="sq-backend-table-header" width="33%"><?php echo translate('layout'); ?></td>
							<?php if ($write_access) { ?>
								<td align="center" class="sq-backend-table-header" width="33%"><?php echo translate('remove'); ?></td>
							<?php } ?>
						</tr>

					<?php

						// print the current screens that are defined for this type_code
						foreach ($screens as $screen => $assetid) {
							?>
							<tr>
								<td class="sq-backend-table-cell">
									<?php echo ucfirst($screen) ?>
								</td>
								<td class="sq-backend-table-cell">
									<?php
										if ($write_access) {
											asset_finder($prefix.'_find['.$type_code.'@'.$screen.']', $assetid, Array('layout' => 'I'));
										} else {
											if (empty($assetid)) {
												echo '<em>'.translate('none').'</em>';
											} else {
												echo get_asset_tag_line($assetid);
											}
										}
									?>
								</td>
								<?php if ($write_access) { ?>
									<td align="center" class="sq-backend-table-cell">
								 		<?php check_box($prefix.'_remove_screen['.$type_code.'@'.$screen.']'); ?>
									</td>
								<?php } ?>
							</tr>
							<?php
						}//end foreach screen

						?>
					</table>
				<?php
				}//end if

				if ($write_access) {
					?>
					<br /><?php echo translate('add_layout'); ?>:
					<?php
					$ei = new Asset_Edit_Interface($type_code);

					$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
					$as =& new $type_code();
					$ef = &$as->getEditFns();

					$screens = Array('', 'create'); // first option is blank
					foreach (array_keys($ef->static_screens) as $screen) $screens[] = $screen;
					foreach (array_keys($ei->getScreens()) as $screen) $screens[] = $screen;

					// remove any screens that have already been defined
					$screens = array_unique(array_diff($screens, array_keys($layouts[$type_code])));

					$uc_screens = Array();
					foreach ($screens as $screen) {
						$uc_screens[$screen] = ucfirst($screen);
					}
					// print a box to add more screens
					combo_box($prefix.'_screens['.$type_code.']', $uc_screens, false, Array());
				}

				$o->closeField();
			$o->closeSection();

		}//end foreach type_code

		return $write_access;

	}//end paintEditLayouts()


	/**
	* Accepts requests to add new screens to type_codes, and layouts to screens
	*
	* @param &object Asset				$asset		the asset of the layout manager
	* @param &object Backend_Outputter	$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function processEditLayouts(&$asset, &$o, $prefix)
	{
		$save = false;

		// get any new screens added to a type code
		if (isset($_POST[$prefix.'_screens'])) {
			$layouts = $asset->attr('layouts');
			foreach ($_POST[$prefix.'_screens'] as $type_code => $screen) {
				if (!$screen) continue;
				if (!isset($layouts[$type_code])) $layouts[$type_code] = Array();
				$layouts[$type_code][$screen] = 0; // set assetid to 0
				$save = true;
			}
		}
		// get any layouts that have been allocated to a screen
		if (isset($_POST[$prefix.'_find'])) {
			foreach ($_POST[$prefix.'_find']  as $info => $assetid) {
				if (!isset($assetid['assetid']) || !$assetid['assetid']) continue;
				list($type_code, $screen) = explode('@', $info);
				$layouts[$type_code][$screen] = $assetid['assetid'];
				$save = true;
			}
		}
		// check to see if any screens have been flagged for removal
		// which will ignore any uncommited customisations to the screen
		if (isset($_POST[$prefix.'_remove_screen'])) {
			foreach (array_keys($_POST[$prefix.'_remove_screen']) as $info) {
				list($type_code, $screen) = explode('@', $info);
				unset($layouts[$type_code][$screen]);
				$save = true;
			}
		}
		// remove all customisations
		// which will overide any uncommited customisations, and any flagged removal of screens
		if (isset($_POST[$prefix.'_remove_type_code'])) {
			foreach (array_keys($_POST[$prefix.'_remove_type_code']) as $type_code) {
				unset($layouts[$type_code]);
				$save = true;
			}
		}
		// save only if we need to
		if ($save) {
			$asset->setAttrValue('layouts', $layouts);
			$asset->saveAttributes();
		}

		return true;

	}//end processEditLayouts()


}//end class
?>