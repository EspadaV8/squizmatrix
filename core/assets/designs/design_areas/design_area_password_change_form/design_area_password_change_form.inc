<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: design_area_password_change_form.inc,v 1.2 2005/10/11 02:06:24 tbarrett Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/designs/design_area/design_area.inc';

/**
* Design_Area_Password_Change_Form
*
* Purpose
*	Show the change-password interface in the change-password design
*
* @author  Nathan de Vries <ndvries@squiz.net>
* @author  Robert Howard <rhoward@squiz.net>
* @version $Revision: 1.2 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Design_Area_Password_Change_Form extends Design_Area
{


	/*
	* Outputs the var either as straight HTML or PHP code, depending on the type
	*
	* @param string	$var			the name of the var to print out
	* @param Array	$args			array of any extra arguments that existed in the print command
	* @param string	$value_prefix	PHP code to wrap put before the value before outputting it
	* @param string	$value_suffix	PHP code to wrap put after  the value before outputting it
	*
	* @access public
	*/
	function printVar($var, $args, $value_prefix='', $value_suffix='')
	{

		// make sure that this var is being painted only within it's valid sections
		switch ($var) {
			case 'form_open' :
			case 'form_close' :
			case 'submit_button' :
			case 'password_change_message' :
			case 'password_old_box' :
			case 'password_new_box' :
			case 'password_confirm_box' :
				if ($this->_tmp['painting_section'] != 'password_change') {
					trigger_localised_error('CORE0179', E_USER_WARNING, $var, $this->attr('id_name'));
					return false;
				}
				break;

		}// end switch

		switch ($var) {
			case 'password_change_heading' :
				echo '<', '?php if (!empty($GLOBALS[\'SQ_PASSWORD_CHANGE_FORM\'])) { echo ', $this->_escapeVar('$GLOBALS[\'SQ_PASSWORD_CHANGE_FORM\'][\'heading\']', $args), '; } ?', '>';
				break;

			case 'password_change_message' :
				echo '<', '?php if (!empty($GLOBALS[\'SQ_PASSWORD_CHANGE_FORM\'])) { echo ', $this->_escapeVar('$GLOBALS[\'SQ_PASSWORD_CHANGE_FORM\'][\'msg\']', $args), '; } ?', '>';
				break;

			case 'form_open' :

				$qry_str_extra = '';
				if ($this->attr('forward_www_vars')) {
					$qry_str_extra = '&amp;<'.'?php echo preg_replace(\'/SQ_ACTION=[^\&]+\&?/\', \'\', $_SERVER[\'QUERY_STRING\']); ?'.'>';
				}

				// open change password form
				if ($this->_tmp['painting_section'] == 'password_change') {
					echo '<form action="<', '?php echo $_SERVER[\'PHP_SELF\']; ?','>?SQ_ACTION=password_change'.$qry_str_extra.'" id="'.$this->attr('id_name').'_password_change_prompt" method="post" onsubmit="return checkEntry();">';
				// open logout form
				} else {
					echo '<form action="<', '?php echo $_SERVER[\'PHP_SELF\']; ?','>?SQ_ACTION=logout'.$qry_str_extra.'" name="'.$this->attr('id_name').'_password_change_prompt" method="post">';
				}

				if ($this->attr('forward_www_vars')) {
					echo '<', '?php
					// Take all the post vars and whack em in the form - important ones are removed
					require_once SQ_LIB_PATH.\'/html_form/html_form.inc\';
					$'.$this->attr('id_name').'_post_vars = $_POST;
					unset($'.$this->attr('id_name').'_post_vars[\'SQ_PASSWORD_CHANGE_OLD\']);
					unset($'.$this->attr('id_name').'_post_vars[\'SQ_PASSWORD_CHANGE_NEW\']);
					unset($'.$this->attr('id_name').'_post_vars[\'SQ_PASSWORD_CHANGE_CONFIRM\']);
					unset($'.$this->attr('id_name').'_post_vars[\'SQ_ACTION\']);
					var_to_hidden_field($'.$this->attr('id_name').'_post_vars);
					?', '>';
				}// end if

				break;

			case 'form_close' :
				echo '</form>
				<script type="text/javascript"><!--
				//<![CDATA[
				var passwordChangeForm = document.forms[\''.$this->attr('id_name').'_password_change_prompt\'];
					function checkEntry() {
						return (passwordChangeForm.SQ_PASSWORD_CHANGE_OLD.value.length > 0 && passwordChangeForm.SQ_PASSWORD_CHANGE_NEW.value.length > 0 && passwordChangeForm.SQ_PASSWORD_CHANGE_CONFIRM.value.length > 0);
					}
				//]]> -->
				</script>
				';
				break;

			case 'system_messages' :
				echo '<', '?php echo implode(\'<br/>\', $GLOBALS[\'SQ_SYSTEM\']->messages()); ?', '>';
				break;

			case 'password_old_box' :
				require_once SQ_LIB_PATH.'/html_form/html_form.inc';
				$extras = 'onfocus="this.select();"';
				foreach ($args As $k => $v) {
					if ($k = 'size') continue;
					$extras .= ' '.$k.'="'.htmlspecialchars($v).'"';
				}
				password_box('SQ_PASSWORD_CHANGE_OLD', '', empty($args['size']) ? 10 : $args['size'], 0, $extras);
				if ($this->attr('give_password_old_focus')) {
					echo '<script type="text/javascript"><!--
						//<![CDATA[
						function set_'.$this->attr('id_name').'_password_old_box_focus() {
							document.getElementById("'.$this->attr('id_name').'_password_change_prompt").elements["SQ_PASSWORD_CHANGE_OLD"].focus();
						}
						window.onload = set_'.$this->attr('id_name').'_password_old_box_focus;
						//]]>
						-->
						</script>';
				}
				break;

			case 'password_new_box' :
				require_once SQ_LIB_PATH.'/html_form/html_form.inc';
				$extras = 'onfocus="this.select();"';
				foreach ($args As $k => $v) {
					if ($k = 'size') continue;
					$extras .= ' '.$k.'="'.htmlspecialchars($v).'"';
				}
				password_box('SQ_PASSWORD_CHANGE_NEW', '', empty($args['size']) ? 10 : $args['size'], 0, $extras);
				break;

			case 'password_confirm_box' :
				require_once SQ_LIB_PATH.'/html_form/html_form.inc';
				$extras = 'onfocus="this.select();"';
				foreach ($args As $k => $v) {
					if ($k = 'size') continue;
					$extras .= ' '.$k.'="'.htmlspecialchars($v).'"';
				}
				password_box('SQ_PASSWORD_CHANGE_CONFIRM', '', empty($args['size']) ? 10 : $args['size'], 0, $extras);
				break;

			case 'submit_button' :
				require_once SQ_LIB_PATH.'/html_form/html_form.inc';
				$extras = '';
				foreach ($args As $k => $v) {
					if ($k == 'value') continue;
					$extras .= ' '.$k.'="'.htmlspecialchars($v).'"';
				}
				submit_button('change_password_logout_button', empty($args['value']) ? ucfirst($this->_tmp['painting_section']) : $args['value'], '', $extras);
				break;

			default :
				parent::printVar($var, $args);
		}// end switch

	}//end printVar()


	/**
	* Print code that outputs a given element from this DA's contents
	*
	* @param array	$item	An entry from our contents array
	*
	* @access private
	* @return void
	*/
	function _printContentItemCode($element)
	{
		switch (array_get_index($element, 'operation')) {
			case 'password_change_section':
				$this->_tmp['painting_section'] = 'password_change';
				foreach ($this->attr('password_change_contents') as $item) {
					parent::_printContentItemCode($item);
				}
				$this->_tmp['painting_section'] = '';
			break;

			default :
				return parent::_printContentItemCode($element);

		}//end switch

	}//end _printContentItemCode()


	/**
	* Get the names of attributes for this DA that cannot be set in the parse file
	*
	* Design Area attributes that are not mentioned in the parse file are normally set to defaults
	* when parsing the design.  Attributes returned by this function are exempted from that process.
	*
	* @access public
	* @return array(string)
	*/
	function getProtectedAttrs()
	{
		$res = parent::getProtectedAttrs();
		$res[] = 'password_change_contents';
		return $res;

	}//end getProtectedAttrs()


}//end class
?>