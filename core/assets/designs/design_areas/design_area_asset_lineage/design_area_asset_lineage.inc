<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: design_area_asset_lineage.inc,v 1.11 2005/11/22 22:36:54 lwright Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/designs/design_area/design_area.inc';

/**
* Design_Area_Asset_Lineage
*
* Purpose
*
*
* @author  Blair Robertson <blair@squiz.net>
* @version $Revision: 1.11 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Design_Area_Asset_Lineage extends Design_Area
{


	/**
	* Outputs the var either as straight HTML or PHP code, depending on the type
	*
	* @param string	$var			the name of the var to print out
	* @param Array	$args			array of any extra arguments that existed in the print command
	* @param string	$value_prefix	PHP code to wrap put before the value before outputting it
	* @param string	$value_suffix	PHP code to wrap put after  the value before outputting it
	*
	* @access public
	*/
	function printVar($var, $args, $value_prefix='', $value_suffix='')
	{

		switch ($var) {
			case 'assetid' :
				echo '<', '?php echo $ASSET_LINEAGE[$'.$this->attr('id_name').'_i][\'assetid\']; ?', '>';
			break;

			case 'asset_link' :
				echo '<', '?php echo $ASSET_LINEAGE[$'.$this->attr('id_name').'_i][\'protocol\'].\'://\'.$ASSET_LINEAGE[$'.$this->attr('id_name').'_i][\'url\']; ?', '>';
			break;

			case 'asset_short_name' :
			case 'asset_name' :
				echo '<', '?php echo ', $this->_escapeVar($value_prefix.'htmlspecialchars($ASSET_LINEAGE[$'.$this->attr('id_name').'_i]['.var_export((string) substr($var, 6), true).'])'.$value_suffix, $args), '; ?', '>';
			break;

			default :
				parent::printVar($var, $args);

		}// end switch

	}//end printVar()


	/**
	* Print code that outputs a given element from this DA's contents
	*
	* @param array	$item	An entry from our contents array
	*
	* @access private
	* @return void
	*/
	function _printContentItemCode($element)
	{
		switch (array_get_index($element, 'operation')) {
			case 'asset' :

				// because the page lineage array contains the site index, all we need to do to have or not have
				// the home link is start the loop at a different position
				$start_index = ($this->attr('prefix_with_home_link')) ? 0 : 1;


				$total = 'count($ASSET_LINEAGE)';
				// because the page lineage array contains the current page, all we need to do to have or not have
				// the current link is end the loop at a different position
				if (!$this->attr('suffix_with_current_link')) {
					$total .= ' - 1';
				}

				$levels_to_print = (int) $this->attr('levels_to_print');

				if (is_int($levels_to_print)) {
					// if we have pages to print, we just adjust the total count factor
					if ($levels_to_print > 0) {
						$total = 'min('.$total.', '.($levels_to_print + $start_index).')';
					} else if ($levels_to_print < 0) {
						// need to minus 1 because the current link is included in the lineage count
						$start_index = 'max(0, (count($ASSET_LINEAGE) - 1 - '.abs($levels_to_print).'))';
					}
				}

				if ($divider_contents = $this->attr('divider_contents')) {
					ob_start();
					foreach ($divider_contents as $item) {
						$this->_printContentItemCode($item);
					}
					$divider = ob_get_contents();
					ob_end_clean();
				} else {
					$divider = '';
				}

				if ($divider != '' && $this->attr('prefix_with_divider')) {
					echo $divider;
				}

				echo '<', '?php

				';

				if ($this->attr('reverse_lineage')) {
					echo 'for ($'.$this->attr('id_name').'_i = '.$total.' - 1, $'.$this->attr('id_name').'_total = '.$total.';
							$'.$this->attr('id_name').'_i >= '.$start_index.';
							$'.$this->attr('id_name').'_i--) {
							';
				} else {
					echo 'for ($'.$this->attr('id_name').'_i = '.$start_index.', $'.$this->attr('id_name').'_total = '.$total.';
							$'.$this->attr('id_name').'_i < $'.$this->attr('id_name').'_total;
							$'.$this->attr('id_name').'_i++) {
							';
				}

				if (!$this->attr('show_hidden_links')) {
					echo 'if ($ASSET_LINEAGE[$'.$this->attr('id_name').'_i][\'link_type\'] != SQ_LINK_TYPE_1) continue;
					';
				}

				if ($asset_contents = $this->attr('asset_contents')) {
					echo '?','>';
					foreach ($asset_contents as $item) {
						$this->_printContentItemCode($item);
					}
					echo '<','?php ';
				}

				// if there is a divider to deal with
				if ($divider != '') {

					// if there is not divider at the end we need to check that we aren't at the end of the list
					if (!$this->attr('suffix_with_divider')) {
						if ($this->attr('reverse_lineage')) {
							echo '
								if ($'.$this->attr('id_name').'_i != '.$start_index.') {
							';
						} else {
							echo '
								if ($'.$this->attr('id_name').'_i != $'.$this->attr('id_name').'_total - 1) {
							';
						}
					}

					echo '?','>', $divider, '<','?php ';

					// if there is not divider at the end we need to check that we aren't at the end of the list
					if (!$this->attr('suffix_with_divider')) {
					echo '
						}//end if';
					}

				}//end if divider

				echo '
				}//end for
				?','>';

				return true;

			default :
				return parent::_printContentItemCode($element);
		}//end switch

	}//end _printContentItemCode()


	/**
	* Get the names of attributes for this DA that cannot be set in the parse file
	*
	* Design Area attributes that can be set in the parse file but aren't are set to defaults
	* when parsing the design.  Attributes returned by this function are exempted from this process.
	*
	* @access public
	* @return array(string)
	*/
	function getProtectedAttrs()
	{
		$res = parent::getProtectedAttrs();
		$res[] = 'asset_contents';
		$res[] = 'divider_contents';
		return $res;

	}//end getProtectedAttrs()


}//end class
?>