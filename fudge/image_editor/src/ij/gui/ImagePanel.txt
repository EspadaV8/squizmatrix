package ij.gui;

import java.awt.*;
import java.awt.image.*;
import java.util.Properties;
import java.awt.event.*;
import ij.*;
import ij.process.*;
import ij.io.*;
import ij.measure.*;
import ij.plugin.filter.Analyzer;
import javax.swing.*;

/** A panel for displaying images. */
public class ImagePanel extends JPanel {

	protected ImagePlus imp;
	protected ImageJ ij;
	protected ImageCanvas ic;
	private double initialMagnification = 1;
	private int newWidth, newHeight;
	protected static ImagePlus clipboard;
	protected boolean closed;
		
	private static final int XINC = 8;
	private static final int YINC = 12;
	private static final int TEXT_GAP = 10;
	private static final int MENU_BAR_HEIGHT = 40;
	private static int xbase = -1;
	private static int ybase;
	private static int xloc;
	private static int yloc;
	private static int count;
	private static boolean centerOnScreen;
	
    private int textGap = centerOnScreen?0:TEXT_GAP;
	
	/** This variable is set false if the user clicks in this
		window, presses the escape key, or closes the window. */
	public boolean running;
	
    public ImagePanel(ImagePlus imp) {
    	this(imp, new ImageCanvas(imp));
   }
    
    public ImagePanel(ImagePlus imp, ImageCanvas ic) {
		super();
		setLayout(new BorderLayout());
		System.out.println("ImagePanel constructor called");
		if (Prefs.blackCanvas && getClass().getName().equals("ij.gui.ImagePanel")) {
			setForeground(Color.white);
			setBackground(Color.black);
		} else {
        	setForeground(Color.black);
        	setBackground(Color.white);
        }
		ij = IJ.getInstance();
		this.imp = imp;
		this.ic = ic;
		add(ic, BorderLayout.CENTER);
 		addKeyListener(ij);
		imp.setPanel(this);
		

     }

  
	public double getInitialMagnification() {
		return initialMagnification;
	}
	
	/** Override Container getInsets() to make room for some text above the image. */
	public Insets getInsets() {
		Insets insets = super.getInsets();
		//IJ.write(""+insets);
		return new Insets(insets.top+textGap, insets.left, insets.bottom, insets.right);
	}

    public void drawInfo(Graphics g) {
        if (textGap==0)
            return;
    	String s="";
		Insets insets = super.getInsets();
    	int type = imp.getType();
    	Calibration cal = imp.getCalibration();
    	if (cal.pixelWidth!=1.0 || cal.pixelHeight!=1.0)
    		s += IJ.d2s(imp.getWidth()*cal.pixelWidth,2) + "x" + IJ.d2s(imp.getHeight()*cal.pixelHeight,2)
 			+ " " + cal.getUnits() + " (" + imp.getWidth() + "x" + imp.getHeight() + "); ";
    	else
    		s += imp.getWidth() + "x" + imp.getHeight() + " pixels; ";
		int size = (imp.getWidth()*imp.getHeight()*imp.getStackSize())/1024;
    	switch (type) {
	    	case ImagePlus.GRAY8:
	    		s += "8-bit";
	    		break;
	    	case ImagePlus.GRAY16:
	    		s += "16-bit grayscale";
				size *= 2;
	    		break;
	    	case ImagePlus.GRAY32:
	    		s += "32-bit grayscale";
				size *= 4;
	    		break;
	    	case ImagePlus.COLOR_256:
	    		s += "8-bit color";
	    		break;
	    	case ImagePlus.COLOR_RGB:
	    		s += "RGB";
				size *= 4;
	    		break;
    	}
    	if (size>=10000)    	
    		s += "; " + (int)Math.round(size/1024.0) + "MB";
    	else if (size>=1024) {
    		double size2 = size/1024.0;
    		s += "; " + IJ.d2s(size2,(int)size2==size2?0:1) + "MB";
    	} else
    		s += "; " + size + "K";
		g.drawString(s, 5, insets.top+TEXT_GAP);
    }


    public void paintComponent(Graphics g) {
		super.paintComponent(g);
		//if (IJ.debugMode) IJ.log("wPaint: " + imp.getTitle());
		drawInfo(g);
		Point loc = ic.getLocation();
		Dimension csize = ic.getSize();
		g.drawRect(loc.x-1, loc.y-1, csize.width+1, csize.height+1);
		//IJ.write(p + " " + d);
    }
    
	
	public ImagePlus getImagePlus() {
		return imp;
	}


	public void setImagePlus(ImagePlus imp) {
		this.imp = imp;
		repaint();
	}
	
	public ImageCanvas getCanvas() {
		return ic;
	}
	

                
    /** This method is called by ImageCanvas.mouseMoved(MouseEvent). 
    	@see ij.gui.ImageCanvas#mouseMoved
    */
    public void mouseMoved(int x, int y) {
    	imp.mouseMoved(x, y);
    }
    
    public String toString() {
    	return imp.getTitle();
    }
    

	
} //class ImagePanel

